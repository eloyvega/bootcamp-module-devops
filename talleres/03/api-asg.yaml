AWSTemplateFormatVersion: 2010-09-09
Description: API de Mythical Mysfits con Auto Scaling Groups.

Mappings:
  RegionMap:
    us-east-1:
      "AmiId": "ami-09d95fab7fff3776c"
    us-east-2:
      "AmiId": "ami-026dea5602e368e96"
    us-west-2:
      "AmiId": "ami-0e34e7b9ca0ace12d"

Resources:
  # LoadBalancer
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MythicalMysfitsLB
      GroupDescription: Load Balancer
      #Security groups inbound rules
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      # Ingress rules
  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MythicalMysfitsInstance
      GroupDescription: Instances
      SecurityGroupIngress:
      - IpProtocol: tcp
      # range of ports
        FromPort: 8000
        ToPort: 8000
        SourceSecurityGroupName: !Ref LoadBalancerSG 
        
      # Ingress rules
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LoadBalancerSG.GroupId
      AvailabilityZones: !GetAZs
      
  # Listeners
    Listeners:
    - InstancePort: 8000
      InstanceProtocol: tcp
      LoadBalancerPort: 80
      Protocol: tcp

  # HealthCheck
    HealthCheck:  
      HealthyThreshold: 2 #pings exitosos para que la maquina sea saludable
      Interval: 30 #tiempo de hacer pings
      Target: "TCP:8000"
      Timeout: 5
      UnhealthyThreshold: 5 #ping para saber si la maquina no responde
      
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref AWS::Region
        - AmiId
      InstanceType: t2.micro
      KeyName: mythical-mysfits
      SecurityGroups:
        - !GetAtt InstanceSG.GroupId
      # UserData
  # AutoScalingGroup:
